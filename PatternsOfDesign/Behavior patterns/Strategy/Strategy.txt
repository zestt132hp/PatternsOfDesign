Strategy(Стратегия)

Стратегия-это поведенческий шаблон проектирования, который определяет семейства схожих алгоритмов и помещает их в собственный класс,
после чего, алгоритмы можно взаимозаменять прямо во время исполнения программы.

Паттерн стратегия позволяет определить семейство схожих алгоритмов, которые часто изменяются или расширяются, и вынести их в собственные классы, 
называемыми стратегией.

Вместо того, чтоб класс выполнял сам какой-либо алгоритм или стратегию, он будет отыгрывать роль контекста, ссылаясь на стратегию и делегировать ей полномочия.
Когда необходимо сменить стратегию, достаточно подставить в контекст другой объект-стратегию.

Важно, чтоб все стратегии имели общий интерфейс, используя этот интерфейс контекст будет независим от конкретных классов стратегий.
Другой вариант, это исзменение стратегий не затрагивая класс контекста.

Аналогия из жизни

Вам нужно добраться до аэропорта. Можно доехать на автобусе, такси
или велосипеде. Здесь вид транспорта является стратегией. Вы
выбираете конкретную стратегию в зависимости от контекста
(например, наличия денег или времени до отлёта).

Пример.
В этом примере, контекст использует Стратегию для выполнения той
или иной арифметической операции.

Применимость

Когда вам нужно использовать разные вариации какого-то алгоритма
внутри одного объекта.
Стратегия позволяет варьировать поведение объекта во время
выполнения программы, подставляя в него различные объекты-
поведения (например, отличающиеся балансом скорости и
потребления ресурсов).

Когда у вас есть множество похожих классов, отличающихся только
некоторым поведением.
Стратегия позволяет вынести отличающееся поведение в отдельную
иерархию классов и свести первоначальные классы к одному, сделав
его поведение настраиваемым.
Когда вы не хотите обнажать детали реализации алгоритмов для
других классов.
Стратегия позволяет изолировать код, данные и зависимости
алгоритмов от других объектов, скрыв из внутри собственных классов.
Когда различные вариации алгоритмов реализованы в виде
развесистого условного оператора. Каждая ветка такого оператора
представляет вариацию алгоритма.
Стратегия помещает каждую лапу такого оператора в отдельный
класс-стратегию. Затем контекст получает определённый объект-
стратегию от клиента и делегирует ему работу. Если вдруг
понадобится сменить алгоритм, в контекст можно подать другую
стратегию.
Шаги реализации
1. Определите алгоритм, который подвержен частым изменениям.
Также подойдёт алгоритм, имеющий несколько вариаций, которые
выбираются во время выполнения программы.
2. Создайте интерфейс стратегий, описывающий этот алгоритм. Он
должен быть общим для всех вариантов алгоритма.
3. Поместите вариации алгоритма в собственные классы, которые
реализуют этот интерфейс.
4. В классе контекста создайте поле для хранения ссылки на текущий
объект-стратегию, а также метод для её изменения. Убедитесь в
том, что контекст работает с этим объектом только через общий
интерфейс стратегий.
5. Клиенты контекста должны подавать в него соответствующий
объект-стратегию, когда хотят, чтобы контекст вёл себя
определённым образом.

Преимущества и недостатки

Горячая замена алгоритмов на лету.
Изолирует код и данные алгоритмов от остальных классов.
Уход от наследования к делегированию.
Реализует принцип открытости/закрытости.
Усложняет программу за счёт дополнительных классов.
Клиент должен знать, в чём разница между стратегиями, чтобы
выбрать подходящую.