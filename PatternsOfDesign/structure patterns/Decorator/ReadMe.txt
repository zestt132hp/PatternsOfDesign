Декоратор - это структурный паттерн проектирования, 
который позволяет диманически добавлять объектам новую функциональнсоть, оборачивая их в полезные обёртки.

Наследование — это первое, что приходит в голову многим
программистам, когда нужно расширить какое-то существующее
поведение. Но механизм наследования имеет несколько досадных
проблем.
Он статичен. Вы не можете изменить поведение существующего
объекта. Для этого вам надо создать новый объект, выбрав другой
подкласс.
Он не разрешает наследовать поведение нескольких классов
одновременно. Из-за этого вам приходится создавать множество
подклассов-комбинаций для получения совмещённого поведения.
Одним из способов обойти эти проблемы является механизм
композиции. Это когда один объект содержит другой, вместо того,
чтобы наследовать его. Как раз на этом принципе построен паттерн
декоратор.Декоратор имеет альтернативное название — «обёртка». Оно удачнее
описывает суть паттерна: вы помещаете целевой объект в другой
объект-обёртку, который запускает базовое поведение объекта, а
затем добавляет к результату что-то своё.
Оба объекта имеют общий интерфейс, поэтому для пользователя нет
никакой разницы с чем работать — с чистым объектом или обёрнутым.
Вы можете использовать несколько разных обёрток одновременно —
результат будет иметь объединённое поведение всех обёрток сразу.

Пример Декоратор защищает финансовые данные
дополнительными уровнями безопасности прозрачно для кода,
который их использует.
