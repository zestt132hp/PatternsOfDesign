Шаблонный метод(Template Method)

Шаблонный метод - это поведенческий шаблон проектирования, который определяет скелет алгоритма, перекладывая ответственность за некторые шаги, его подклассам.
Шаблон позволяет подклассам переопределять шаги алгоритма, не меняя его общей структуры.

Шаблонный метод предлагает разбить алгоритм на последовательность шагов, описать их в отдельных методах и вызывать их одном "шаблонном" методе друг за другом.
Это позволит подклассам реализовывать не все методы, а только лишь их часть, не затрагивая структуру и алгоритм базового класса, которые для подкласса не так важны.


Аналогия из жизни

Строители используют подход, похожий на шаблонный метод при
строительстве типовых домов. У них есть основной архитектурный
проект, в котором расписаны шаги строительства — заливка
фундамента, постройка стен, постановка крыши, установка окон,
обивка и так далее.
Но, несмотря на стандартизацию каждого этапа, строители могут
делать небольшие изменения на любом из этапов, чтобы сделать дом
чуточку непохожим на другие.

Структура

1. Абстрактный класс определяет шаги алгоритма и содержит
шаблонный метод, состоящий из вызовов этих шагов. Шаги могут
быть как абстрактными, так и содержать реализацию по
умолчанию.
2. Конкретный класс переопределяет некоторые (или все) шаги
алгоритма. Конкретные классы не переопределяют сам
шаблонный метод.

Пример в коде. 

В этом примере Шаблонный метод используется как заготовка для
стандартных действий искусственного интеллекта в простой игре. Для
введения в игру новой расы, достаточно создать подкласс и
реализовать в нём недостающие методы.
Все расы игры будут содержать примерно такие же типы юнитов и
строений, поэтому структура ИИ будет одинаковой. Но разные расы
могут по-разному реализовать эти шаги. Так, например, орки будут
агрессивней в атаке, люди — более активны в защите, а дикие
монстры — вообще не будут заниматься строительством.

Шаги реализации
1. Изучите алгоритм и подумайте, можно ли его разбить на шаги.
Прикиньте, какие шаги будут стандартными для всех вариаций
алгоритма, а какие — изменчивыми.
2. Создайте абстрактный базовый класс. Определите в нём
шаблонный метод. Этот метод должен состоять из вызовов шагов
алгоритма. Имеет смысл сделать шаблонный метод финальным,
чтобы подклассы не могли переопределить его (если ваш язык
программирования это позволяет).
3. Добавьте в абстрактный класс методы для каждого из шагов
алгоритма. Вы можете сделать эти методы абстрактными или
добавить какую-то реализацию по умолчанию. В первом случае,
все подклассы должны будут реализовать эти методы, а во втором
— только если реализация шага в подклассе отличается от
стандартной версии.
4. Подумайте о введении в алгоритм хуков. Чаще всего, хуки
располагают между основными шагами алгоритма, а также до и
после всех шагов.
5. Создайте конкретные классы, унаследовав их от абстрактного
класса. Реализуйте в них все недостающие шаги и хуки.


Преимущества и недостатки

Облегчает повторное использование кода.
Вы жёстко ограничены скелетом существующего алгоритма.
Вы можете нарушить принцип подстановки Барбары Лисков, изменяя
базовое поведение одного из шагов алгоритма через подкласс.
С ростом количества шагов, шаблонный метод становится слишком
сложно поддерживать.