Паттерн "Фасад" предназначен для скрытия сложной реализации от пользователя и предоставления ему более простых и понятных функуций.
К примеру, использование того или иного фреймворка может быть запутано и усложнено, фасад позволяет скрыть обращения к фреймворку, 
разделив его сложную логику на более простую.

Фасад — это простой интерфейс работы со сложной подсистемой,
содержащей множество классов. Фасад может иметь урезанный
интерфейс, не имеющий 100% функциональности, которую можно
достичь, используя сложную подсистему напрямую. Но он
предоставляет именно те фичи, которые нужны клиенту, и скрывает
все остальное.
Фасад полезен, если вы используете какую-то сложную библиотеку с
множеством подвижных частей, но вам нужна только часть её
возможностей.
К примеру, программа, заливающая видео котиков в социальные сети,
может использовать профессиональную библиотеку сжатия видео. Но
все что нужно клиентскому коду этой программы — простой метод
encode(filename, format) . Создав класс с таким методом, вы
реализуете свой первый фасад.

Пример из реальной жизни.
При совершении заказа в интернет магазине, от нас скрыты многие детали, касающихся отдела маркетинга, логистики и работы склада.
Но зато не зная всех деталей, мы выполняем и подтверждаем заказ.

Кодирование будет основано на использовании библиотеки кодеков. 
Вместо непосредственной работы с дюжиной классов, фасад
предоставляет коду приложения единственный метод для
конвертации видео, который сам заботится о том, чтобы правильно
сконфигурировать нужные объекты фреймворка и получить
требуемый результат.

Применимость
Когда вам нужно представить простой или урезанный интерфейс к
сложной подсистеме.
Часто подсистемы усложняются по мере развития. Применение
большинства паттернов приводит к появлению меньших классов, но в
бóльшем количестве. Такую подсистему проще повторно использовать
и настраивать под конкретные нужды, но вместе с тем применять
подсистему без настройки становится труднее. Фасад предлагает
некоторый вид системы по умолчанию, устраивающий большинство
клиентов.
Когда вы хотите разложить подсистему на отдельные слои.
Используйте фасады для определения точек входа на каждый уровень
подсистемы. Если подсистемы зависят друг от друга, то зависимость
можно упростить, разрешив подсистемам обмениваться информацией
только через фасады.
Например, возьмём ту же сложную система видеоконвертации. Вы
хотите разбить её на слои работы с аудио и видео. Для каждой из этих
частей можно попытаться создать фасад и заставить классы аудио и
видео обработки общаться друг с другом через эти фасады, а не
напрямую.
Преимущества и недостатки
Изолирует клиентов от компонентов системы.
Уменьшает зависимость между подсистемой и клиентами.
Фасад рискует стать божественным объектом, привязанным ко всем
классам программы.