Мост - это структурный паттерн, позволяющий разделить один или несколько классов на две иерархии
- асбстракцию и реализацию, позволяя изменять их независимо друг от друга.

Абстракция и Реализация

Итак, «Абстракция» (или «интерфейс») — это образный слой
управления чем-либо.
Он не делает работу самостоятельно, а
делегирует её слою «реализации» (иногда называемому
«платформой»).
Только не путайте эти термины с интерфейсами или
абстрактными классами из вашего языка программирования, это
не одно и то же.
Если говорить о реальных программах, то абстракцией может
выступать графический интерфейс программы, а реализацией — API, к
которому интерфейс обращается по реакции на действия
пользователя.

Применимость
Когда вы хотите разделить монолитный класс, который содержит
несколько различных реализаций какой-то функциональности
(например, может работать с разными системами баз данных).
Чем больше класс, тем тяжелее разобраться в его коде, тем больше
это затягивает разработку. Кроме того, изменения, вносимые в одну
из реализаций, приводят к редактированию всего класса, что может
привести к ошибкам.
Мост позволяет разделить монолитный класс на несколько отдельных
иерархий. После этого вы можете менять их код независимо друг от
друга. Это упрощает работу над кодом и уменьшает вероятность
внесения ошибок.
Когда класс нужно расширять в двух независимых плоскостях.
Мост предлагает выделить одну из таких плоскостей в отдельную
иерархию классов, храня ссылку на один из её объектов в
первоначальном классе.
Когда вы хотите, чтобы реализацию можно было бы изменять во
время выполнения программы.


Мост позволяет заменять реализацию даже во время выполнения
программы, так как конкретная реализация не «вшита» в класс
абстракции.
Кстати, из-за этого пункта Мост часто путают со Стратегией.
Обратите внимания, что у Моста этот пункт стоит на последнем
месте по значимости, так как его главная задача — структурная.