Применимость

Когда ваш код не должен зависеть от классов копируемых объектов.
Такое часто бывает, если ваш код работает с объектами, поданными
извне через какой-то общий интерфейс. Вы не можете привязаться к
их классам, даже если бы хотели, так как их конкретные классы
неизвестны.

Паттерн прототип предоставляет клиенту общий интерфейс для
работы со всеми прототипами. Клиенту не нужно зависеть от всех
классов копируемых объектов, а только от интерфейса клонирования.
Когда вы имеете уйму подклассов, которые отличаются начальными
значениями полей. Кто-то создал эти классы, чтобы быстро создавать
объекты с определённой конфигурацией.
Паттерн прототип предлагает использовать набор прототипов, вместо
создания подклассов для популярных конфигураций объектов.
Таким образом, вместо порождения объектов из подклассов, вы
будете копировать существующие объекты-прототипы, в которых уже
настроено внутреннее состояние. Это позволит избежать взрывного
роста количества классов в программе и уменьшить её сложность.

Шаги реализации

1. Создайте интерфейс прототипов с единственным методом clone .
Если у вас уже есть иерархия продуктов, метод клонирования
можно объявить непосредственно в каждом из её классов.
2. Добавьте в классы будущих прототипов альтернативный
конструктор, принимающий в качестве аргумента объект текущего
класса. Этот конструктор должен скопировать из поданного
объекта значения всех полей, объявленных в рамках текущего
класса, а затем передать выполнение родительскому конструктору,
чтобы тот позаботился об остальных полях.
Если ваш язык программирования не поддерживает перегрузку
методов, то копирование значений можно проводить и в другом
методе, специально созданном для этих целей. Конструктор
удобнее тем, что позволяет клонировать объект за один вызов.
3. Метод клонирования обычно состоит всего из одной строки:
вызова оператора new с конструктором прототипа. Все классы,
поддерживающие клонирование, должны явно определить метод
clone , чтобы подать собственный класс в оператор new . В
обратном случае, результатом клонирования окажется объект
родительского класса.
4. Опционально, создайте центральное хранилище прототипов. В нём
можно хранить вариации объектов, возможно даже одного класса,
но по-разному настроенных.
Вы можете разместить это хранилище либо в новом фабричном
классе, либо в фабричном методе базового класса прототипов.
Такой фабричный метод должен на основании входящих
аргументов искать в каталоге прототипов подходящий экземпляр,
а затем вызывать его метод клонирования и возвращать
полученный объект.
Наконец, нужно будет избавиться от прямых вызовов
конструкторов объектов, заменив их вызовами фабричного метода
хранилища прототипов.

Пример привидён на основе геометрических фигур.


Преимущества и недостатки
Позволяет клонировать объекты, не привязываясь к их конкретным
классам.
Меньше повторяющегося кода инициализации объектов.
Ускоряет создание объектов.
Альтернатива созданию подклассов для конструирования сложных
объектов.
Сложно клонировать составные объекты, имеющие ссылки на другие
объекты.