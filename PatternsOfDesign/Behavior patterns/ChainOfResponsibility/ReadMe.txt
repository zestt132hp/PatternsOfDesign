Chain Of Responsibility(\Цепочка обязанностей) 
Поведенческий шаблон проектирования, позволяющей по цепочке передавать запросы последовательно обработчикам. 
Каждый последующий обработчик решает, 
может ли он обработать запрос сам или стоит передать запрос дальше.

Пример.
Вы купили новую видеокарту. Она автоматически определилась и
заработала под Windows, но в вашей любимой Ubuntu «завести» её не
удалось. Со слабой надеждой, вы звоните в службу поддержки.
Первым вы слышите голос автоответчика, предлагающий выбор из
десятка стандартных решений. Ни один из вариантов не подходит, и
робот соединяет вас с живым оператором.
Увы, но рядовой оператор поддержки умеет общаться только
заученными фразами и давать шаблонные ответы. После очередного
предложения «выключить и включить компьютер», вы просите связать
вас с настоящими инженерами.
Оператор перебрасывает звонок дежурному инженеру, изнывающему
от скуки в своей каморке. Уж он-то знает, как вам помочь! Инженер
рассказывает, где и как вы можете скачать подходящие драйвера, и
как настроить их под Ubuntu. Запрос удовлетворён. Вы кладёте
трубку.

пример кода
В этом примере Цепочка обязанностей отвечает за показ контекстной
помощи для активных элементов пользовательского интерфейса.

Классы UI построены с помощью компоновщика, но каждый элемент «знает» о своём
контейнере. Цепочку можно выстроить, пройдясь по всем контейнерам, в которые
вложен элемент.

Применимость
Когда программа содержит несколько объектов, способных
обработать тот или иной запрос, однако заранее неизвестно какой
запрос придёт и какой обработчик понадобится.
Вы связываете потенциальных обработчиков в одну цепь и
поочерёдно спрашиваете, хочет ли данный объект обработать запрос.
Если нет, двигаетесь дальше по цепочке.
Когда важно, чтобы обработчики выполнялись один за другим в
строгом порядке.
Цепочка обязанностей позволяет запускать обработчики
последовательно один за другим в определённом порядке.
Когда набор объектов, способных обработать запрос, должен
задаваться динамически.В любой момент вы можете вмешаться в существующую цепочку и
переназначить связи так, чтобы убрать или добавить новое звено.