Singleton

Одиночка решает сразу две проблемы (нарушая принцип
единственной ответственности класса).
	1. Гарантирует наличие единственного экземпляра класса. Чаще
всего это полезно для доступа к какому-то общему ресурсу,
например, базе данных.
	2. Предоставляет глобальную точку доступа. Это не просто
глобальная переменная, через которую можно достучаться к
определённому объекту. Глобальные переменные не защищены от
записи, поэтому любой код может подменять их значения без
вашего ведома.
Но есть и другой нюанс. Неплохо бы хранить в одном месте и код,
который решает проблему №1, а также иметь к нему простой и
доступный интерфейс.


Решение
Все реализации одиночки сводятся к тому, чтобы скрыть конструктор
по умолчанию и создать публичный статический метод, который и
будет контролировать жизненный цикл объекта-одиночки.
Если у вас есть доступ к классу-одиночке, значит, будет доступ и к
этому статическому методу. Из какой точки кода вы бы его не
вызвали, он всегда будет отдавать один и тот же объект.

Аналогия из жизни
Правительство государства — хороший пример одиночки. В
государстве может быть только одно официальное правительство. Вне
зависимости от того, кто конкретно заседает в правительстве, оно
имеет глобальную точку доступа «Правительство страны N».

Пример решения
Пример основан на подключении к базе данных. Т.е., если нужно единственное подключение и, чтоб другие немогли подменить код


Применимость
Когда в программе должен быть единственный экземпляр какого-то
класса, доступный всем клиентам (например, общий доступ к базе
данных из разных частей программы).
Одиночка скрывает от клиентов все способы создания нового объекта,
кроме специального метода. Этот метод либо создаёт объект, либо
отдаёт существующий объект, если он уже был создан.
Когда вам хочется иметь больше контроля над глобальными
переменными.
В отличие от глобальных переменных, Одиночка гарантирует, что
никакой другой код не заменит созданный экземпляр класса, поэтому
вы всегда уверены в наличие лишь одного объекта-одиночки.
Тем не менее, в любой момент вы можете расширить это ограничение
и позволить любое количество объектов-одиночек, поменяв код в
одном месте (метод getInstance ).