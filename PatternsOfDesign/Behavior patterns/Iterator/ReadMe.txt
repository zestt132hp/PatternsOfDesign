Итератор(Iterator) - это поведенческий шаблон проектирования, который позволяет обходить коллекцию элементов и не раскрывать внутренне представление каждого.
Коллекция может быть обыкновенным линейным или двумерным массивом, а может быть и деревом(Компоновщиком) или же графом.

Идея паттерна Итератор в том, чтобы вынести поведение обхода
коллекции из самой коллекции в отдельный класс.
Объект итератор будет отслеживать состояние обхода, текущую
позицию в коллекции и сколько элементов ещё осталось обойти. Одну
и ту же коллекцию смогут одновременно обходить различные
итераторы, а сама коллекция не будет даже знать об этом.
К тому же, если вам понадобится добавить новый способ обхода, вы
создадите новый класс итератора, не изменяя существующий код
коллекции.

Аналогия из жизни
Вы планируете полететь в Рим и обойти все достопримечательности
за пару дней. Но приехав, вы можете долго петлять узкими улочками,
пытаясь найти Колизей. Если у вас ограниченный бюджет — не беда.
Вы можете воспользоваться виртуальным гидом, скачанным на
телефон, который позволит отфильтровать только интересные вам
точки. А можете плюнуть и нанять локального гида, который хоть и
обойдётся в копеечку, но знает город как свои пять пальцев и сможет
посвятить вас во все городские легенды.
Таким образом, Рим выступает коллекцией достопримечательностей,
а ваш мозг, навигатор или гид — итератором по коллекции. Вы, как
клиентский код, можете выбрать один из итераторов, опираясь на
решаемую задачу и доступные ресурсы.

Пример описан кодом.
В этом примере паттерн Итератор используется для реализации
обхода нестандартной коллекции, которая инкапсулирует доступ к
социальному графу Facebook. Коллекция предоставляет несколько
итераторов, которые могут по-разному обходить профиля людей.

Применимость
Когда у вас есть сложная структура данных, и вы хотите скрыть от
клиента детали её реализации (из-за сложности или вопросов
безопасности).
Итератор предоставляет клиенту всего несколько простых методов
перебора элементов коллекции. Это не только упрощает доступ к
коллекции, но и защищает её данные от неосторожных или
злоумышленных действий.
Когда вам нужно иметь несколько вариантов обхода одной и той же
структуры данных.
Нетривиальные алгоритмы обхода структуры данных могут иметь
довольно объёмный код. Этот код будет захламлять всё вокруг, если
поместить его в класс коллекции или где-то посреди основной бизнес-
логики программы. Применив итератор, вы можете переместить код
обхода структуры данных в собственный класс, упростив поддержку
остального кода.
Когда вам хочется иметь единый интерфейс обхода различных
структур данных.
Итератор позволяет вынести реализации различных вариантов обхода
в подклассы. Это позволит легко взаимозаменять объекты итераторов,
в зависимости от того, с какой структурой данных приходится
работать.

Преимущества и недостатки
Упрощает классы хранения данных.
Позволяет реализовать различные способы обхода структуры данных.
Позволяет одновременно перемещаться по структуре данных в
разные стороны.
Неоправдан, если можно обойтись простым циклом.