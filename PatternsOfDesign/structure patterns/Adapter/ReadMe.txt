В данной подпапке представлен шаблон проектирования Адаптер.

Адаптер применяется тогда, когда клиентский код не совпадает с используемой библиотекой 
и нужно какое-то решение, позволяющее использовать одно и другое вместе.

Адаптеры могут не только переводить данные из одного формата в
другой, но и помогать объектам с разными интерфейсами работать
сообща. Это работает так:
1. Адаптер следует интерфейсу, который один объект ожидает от
другого.
2. Когда первый объект вызывает методы адаптера, адаптер
передаёт выполнение второму объекту, вызывая в нём те или иные
методы в том порядке, который важен для второго объекта.
Пример приведен по теме круглых и квадратных колышек.
Адаптер вычисляет наименьшую окружность, в которую можно
вписать квадратный колышек и представляет его как круглый колышек
с таким диаметром.

Применимость
Когда вы хотите использовать сторонний класс, но его интерфейс не
соответствует остальному коду приложения.
Адаптер позволяет создать объект-прокладку, который будет
превращать вызовы приложения в формат, понятный стороннему
классу.
Когда вам нужно использовать несколько существующих подклассов,
но в них не хватает какой-то общей функциональности. Причём
расширять суперкласс вы не можете.

Вы могли бы создать ещё один уровень подклассов, и добавить в них
недостающую функциональность. Но при этом придётся дублировать
один и тот же код в обеих ветках подклассов.
Более элегантное решение — поместить недостающую
функциональность в адаптер и приспособить его для работы с
суперклассом. Такой адаптер сможет работать со всеми подклассами
иерархии. Это решение будет сильно напоминать паттерн Посетитель.